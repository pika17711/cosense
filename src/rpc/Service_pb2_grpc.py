# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import Service_pb2 as Service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in Service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PerceptionServiceStub(object):
    """感知子系统
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMyPCD = channel.unary_unary(
                '/service.PerceptionService/GetMyPCD',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.PCD.FromString,
                _registered_method=True)
        self.GetMyLidarPoseAndPCD = channel.unary_unary(
                '/service.PerceptionService/GetMyLidarPoseAndPCD',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.LidarPoseAndPCD.FromString,
                _registered_method=True)
        self.GetMyPVA = channel.unary_unary(
                '/service.PerceptionService/GetMyPVA',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.PVA.FromString,
                _registered_method=True)
        self.GetPerceptionInfo = channel.unary_unary(
                '/service.PerceptionService/GetPerceptionInfo',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.PerceptionInfo.FromString,
                _registered_method=True)
        self.GetMyExtrinsicMatrix = channel.unary_unary(
                '/service.PerceptionService/GetMyExtrinsicMatrix',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.ExtrinsicMatrix.FromString,
                _registered_method=True)


class PerceptionServiceServicer(object):
    """感知子系统
    """

    def GetMyPCD(self, request, context):
        """向其他进程提供“获取自车点云”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyLidarPoseAndPCD(self, request, context):
        """向其他进程提供“获取自车雷达位姿和点云”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyPVA(self, request, context):
        """向其他进程提供“获取自车雷达位姿 、速度、加速度信息”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPerceptionInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyExtrinsicMatrix(self, request, context):
        """向其他进程提供“获取自车外参矩阵”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PerceptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMyPCD': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyPCD,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.PCD.SerializeToString,
            ),
            'GetMyLidarPoseAndPCD': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyLidarPoseAndPCD,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.LidarPoseAndPCD.SerializeToString,
            ),
            'GetMyPVA': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyPVA,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.PVA.SerializeToString,
            ),
            'GetPerceptionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPerceptionInfo,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.PerceptionInfo.SerializeToString,
            ),
            'GetMyExtrinsicMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyExtrinsicMatrix,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.ExtrinsicMatrix.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.PerceptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.PerceptionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PerceptionService(object):
    """感知子系统
    """

    @staticmethod
    def GetMyPCD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.PerceptionService/GetMyPCD',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.PCD.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyLidarPoseAndPCD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.PerceptionService/GetMyLidarPoseAndPCD',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.LidarPoseAndPCD.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyPVA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.PerceptionService/GetMyPVA',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.PVA.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPerceptionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.PerceptionService/GetPerceptionInfo',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.PerceptionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyExtrinsicMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.PerceptionService/GetMyExtrinsicMatrix',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.ExtrinsicMatrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CollaborationServiceStub(object):
    """协同感知子系统
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOthersInfos = channel.unary_unary(
                '/service.CollaborationService/GetOthersInfos',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.OthersInfos.FromString,
                _registered_method=True)
        self.GetOthersCommMasks = channel.unary_unary(
                '/service.CollaborationService/GetOthersCommMasks',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.OthersCommMasks.FromString,
                _registered_method=True)
        self.GetOthersLidarPosesAndPCDs = channel.unary_unary(
                '/service.CollaborationService/GetOthersLidarPosesAndPCDs',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.LidarPosesAndPCDs.FromString,
                _registered_method=True)


class CollaborationServiceServicer(object):
    """协同感知子系统
    """

    def GetOthersInfos(self, request, context):
        """向其他进程提供“获取所有他车信息”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOthersCommMasks(self, request, context):
        """向其他进程提供“获取所有他车协作图”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOthersLidarPosesAndPCDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollaborationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOthersInfos': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOthersInfos,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.OthersInfos.SerializeToString,
            ),
            'GetOthersCommMasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOthersCommMasks,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.OthersCommMasks.SerializeToString,
            ),
            'GetOthersLidarPosesAndPCDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOthersLidarPosesAndPCDs,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.LidarPosesAndPCDs.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.CollaborationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.CollaborationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollaborationService(object):
    """协同感知子系统
    """

    @staticmethod
    def GetOthersInfos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.CollaborationService/GetOthersInfos',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.OthersInfos.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOthersCommMasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.CollaborationService/GetOthersCommMasks',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.OthersCommMasks.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOthersLidarPosesAndPCDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.CollaborationService/GetOthersLidarPosesAndPCDs',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.LidarPosesAndPCDs.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DetectionServiceStub(object):
    """融合检测子系统
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCommMaskAndLidarPose = channel.unary_unary(
                '/service.DetectionService/GetCommMaskAndLidarPose',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.CommMaskAndLidarPose.FromString,
                _registered_method=True)
        self.GetFusedFeature = channel.unary_unary(
                '/service.DetectionService/GetFusedFeature',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.Feature.FromString,
                _registered_method=True)
        self.GetFusedCommMask = channel.unary_unary(
                '/service.DetectionService/GetFusedCommMask',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.CommMask.FromString,
                _registered_method=True)
        self.GetLatestPredBox = channel.unary_unary(
                '/service.DetectionService/GetLatestPredBox',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.PredBox.FromString,
                _registered_method=True)
        self.GetPresentationInfo = channel.unary_unary(
                '/service.DetectionService/GetPresentationInfo',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.PresentationInfo.FromString,
                _registered_method=True)
        self.PCD2Feature = channel.unary_unary(
                '/service.DetectionService/PCD2Feature',
                request_serializer=Service__pb2.PCD.SerializeToString,
                response_deserializer=Service__pb2.Feature.FromString,
                _registered_method=True)
        self.PCD2FeatureAndConfMap = channel.unary_unary(
                '/service.DetectionService/PCD2FeatureAndConfMap',
                request_serializer=Service__pb2.PCD.SerializeToString,
                response_deserializer=Service__pb2.FeatureAndConfMap.FromString,
                _registered_method=True)
        self.LidarPose2ProjectedCommMask = channel.unary_unary(
                '/service.DetectionService/LidarPose2ProjectedCommMask',
                request_serializer=Service__pb2.LidarPose.SerializeToString,
                response_deserializer=Service__pb2.CommMask.FromString,
                _registered_method=True)
        self.LidarPoses2ProjectedFeatures = channel.unary_unary(
                '/service.DetectionService/LidarPoses2ProjectedFeatures',
                request_serializer=Service__pb2.LidarPoses.SerializeToString,
                response_deserializer=Service__pb2.Features.FromString,
                _registered_method=True)
        self.LidarPoses2ProjectedCommMaskedFeatures = channel.unary_unary(
                '/service.DetectionService/LidarPoses2ProjectedCommMaskedFeatures',
                request_serializer=Service__pb2.LidarPoses.SerializeToString,
                response_deserializer=Service__pb2.CommMaskedFeatures.FromString,
                _registered_method=True)
        self.RequestMap2ProjectedCommMaskedFeature = channel.unary_unary(
                '/service.DetectionService/RequestMap2ProjectedCommMaskedFeature',
                request_serializer=Service__pb2.RequestMap.SerializeToString,
                response_deserializer=Service__pb2.CommMaskedFeature.FromString,
                _registered_method=True)
        self.Feature2ConfMap = channel.unary_unary(
                '/service.DetectionService/Feature2ConfMap',
                request_serializer=Service__pb2.Feature.SerializeToString,
                response_deserializer=Service__pb2.ConfMap.FromString,
                _registered_method=True)
        self.Feature2PredBox = channel.unary_unary(
                '/service.DetectionService/Feature2PredBox',
                request_serializer=Service__pb2.Feature.SerializeToString,
                response_deserializer=Service__pb2.PredBox.FromString,
                _registered_method=True)


class DetectionServiceServicer(object):
    """融合检测子系统
    """

    def GetCommMaskAndLidarPose(self, request, context):
        """向其他进程提供欧内该“获取协作图”
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFusedFeature(self, request, context):
        """向其他进程提供“获取融合后的特征”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFusedCommMask(self, request, context):
        """向其他进程提供“获取融合后的协作图”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestPredBox(self, request, context):
        """向其他进程提供“获取最新检测框”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPresentationInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PCD2Feature(self, request, context):
        """向其他进程提供“根据点云获取特征”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PCD2FeatureAndConfMap(self, request, context):
        """向其他进程提供“根据点云获取特征和置信图”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LidarPose2ProjectedCommMask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LidarPoses2ProjectedFeatures(self, request, context):
        """向其他进程提供“根据位姿获取投射后的特征”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LidarPoses2ProjectedCommMaskedFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestMap2ProjectedCommMaskedFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Feature2ConfMap(self, request, context):
        """向其他进程提供“根据特征获取置信图”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Feature2PredBox(self, request, context):
        """向其他进程提供“根据特征获取检测框”的服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCommMaskAndLidarPose': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommMaskAndLidarPose,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.CommMaskAndLidarPose.SerializeToString,
            ),
            'GetFusedFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFusedFeature,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.Feature.SerializeToString,
            ),
            'GetFusedCommMask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFusedCommMask,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.CommMask.SerializeToString,
            ),
            'GetLatestPredBox': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestPredBox,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.PredBox.SerializeToString,
            ),
            'GetPresentationInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPresentationInfo,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.PresentationInfo.SerializeToString,
            ),
            'PCD2Feature': grpc.unary_unary_rpc_method_handler(
                    servicer.PCD2Feature,
                    request_deserializer=Service__pb2.PCD.FromString,
                    response_serializer=Service__pb2.Feature.SerializeToString,
            ),
            'PCD2FeatureAndConfMap': grpc.unary_unary_rpc_method_handler(
                    servicer.PCD2FeatureAndConfMap,
                    request_deserializer=Service__pb2.PCD.FromString,
                    response_serializer=Service__pb2.FeatureAndConfMap.SerializeToString,
            ),
            'LidarPose2ProjectedCommMask': grpc.unary_unary_rpc_method_handler(
                    servicer.LidarPose2ProjectedCommMask,
                    request_deserializer=Service__pb2.LidarPose.FromString,
                    response_serializer=Service__pb2.CommMask.SerializeToString,
            ),
            'LidarPoses2ProjectedFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.LidarPoses2ProjectedFeatures,
                    request_deserializer=Service__pb2.LidarPoses.FromString,
                    response_serializer=Service__pb2.Features.SerializeToString,
            ),
            'LidarPoses2ProjectedCommMaskedFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.LidarPoses2ProjectedCommMaskedFeatures,
                    request_deserializer=Service__pb2.LidarPoses.FromString,
                    response_serializer=Service__pb2.CommMaskedFeatures.SerializeToString,
            ),
            'RequestMap2ProjectedCommMaskedFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestMap2ProjectedCommMaskedFeature,
                    request_deserializer=Service__pb2.RequestMap.FromString,
                    response_serializer=Service__pb2.CommMaskedFeature.SerializeToString,
            ),
            'Feature2ConfMap': grpc.unary_unary_rpc_method_handler(
                    servicer.Feature2ConfMap,
                    request_deserializer=Service__pb2.Feature.FromString,
                    response_serializer=Service__pb2.ConfMap.SerializeToString,
            ),
            'Feature2PredBox': grpc.unary_unary_rpc_method_handler(
                    servicer.Feature2PredBox,
                    request_deserializer=Service__pb2.Feature.FromString,
                    response_serializer=Service__pb2.PredBox.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.DetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.DetectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DetectionService(object):
    """融合检测子系统
    """

    @staticmethod
    def GetCommMaskAndLidarPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/GetCommMaskAndLidarPose',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.CommMaskAndLidarPose.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFusedFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/GetFusedFeature',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.Feature.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFusedCommMask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/GetFusedCommMask',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.CommMask.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLatestPredBox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/GetLatestPredBox',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.PredBox.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPresentationInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/GetPresentationInfo',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.PresentationInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PCD2Feature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/PCD2Feature',
            Service__pb2.PCD.SerializeToString,
            Service__pb2.Feature.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PCD2FeatureAndConfMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/PCD2FeatureAndConfMap',
            Service__pb2.PCD.SerializeToString,
            Service__pb2.FeatureAndConfMap.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LidarPose2ProjectedCommMask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/LidarPose2ProjectedCommMask',
            Service__pb2.LidarPose.SerializeToString,
            Service__pb2.CommMask.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LidarPoses2ProjectedFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/LidarPoses2ProjectedFeatures',
            Service__pb2.LidarPoses.SerializeToString,
            Service__pb2.Features.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LidarPoses2ProjectedCommMaskedFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/LidarPoses2ProjectedCommMaskedFeatures',
            Service__pb2.LidarPoses.SerializeToString,
            Service__pb2.CommMaskedFeatures.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestMap2ProjectedCommMaskedFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/RequestMap2ProjectedCommMaskedFeature',
            Service__pb2.RequestMap.SerializeToString,
            Service__pb2.CommMaskedFeature.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Feature2ConfMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/Feature2ConfMap',
            Service__pb2.Feature.SerializeToString,
            Service__pb2.ConfMap.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Feature2PredBox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DetectionService/Feature2PredBox',
            Service__pb2.Feature.SerializeToString,
            Service__pb2.PredBox.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PresentationServiceStub(object):
    """信息呈现子系统
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class PresentationServiceServicer(object):
    """信息呈现子系统
    """


def add_PresentationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.PresentationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.PresentationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PresentationService(object):
    """信息呈现子系统
    """

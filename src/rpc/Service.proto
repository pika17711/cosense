syntax = "proto3";

package service;

service PerceptionService {                                             // 感知子系统
    rpc GetMyPCD (Empty) returns (PCD);                                 // 向其他进程提供“获取自车点云”的服务
    rpc GetMyLidarPoseAndPCD (Empty) returns (LidarPoseAndPCD);         // 向其他进程提供“获取自车雷达位姿和点云”的服务
    rpc GetMyPVA (Empty) returns (PVA);                                 // 向其他进程提供“获取自车雷达位姿 、速度、加速度信息”的服务
    rpc GetMyExtrinsicMatrix (Empty) returns (ExtrinsicMatrix);         // 向其他进程提供“获取自车外参矩阵”的服务
}

service CollaborationService {                                          // 协同感知子系统
    rpc GetOthersInfos (Empty) returns (OthersInfos);                 // 向其他进程提供“获取所有他车信息”的服务
    rpc GetOthersCommMasks (Empty) returns (OthersCommMasks);        // 向其他进程提供“获取所有他车协作图”的服务
}

service DetectionService {                                              // 融合检测子系统
    rpc GetCommMaskAndLidarPose (Empty) returns (CommMaskAndLidarPose); // 向其他进程提供欧内该“获取协作图”
    rpc GetFusedFeature (Empty) returns (Feature);                      // 向其他进程提供“获取融合后的特征”的服务
    rpc GetFusedCommMask (Empty) returns (CommMask);                    // 向其他进程提供“获取融合后的协作图”的服务
    rpc GetLatestPredBox (Empty) returns (PredBox);                     // 向其他进程提供“获取最新检测框”的服务
    rpc PCD2Feature (PCD) returns (Feature);                            // 向其他进程提供“根据点云获取特征”的服务
    rpc PCD2FeatureAndConfMap (PCD) returns (FeatureAndConfMap);        // 向其他进程提供“根据点云获取特征和置信图”的服务
    rpc LidarPoses2ProjectedFeatures (LidarPoses) returns (Features);    // 向其他进程提供“根据位姿获取投射后的特征”的服务
    rpc LidarPoses2ProjectedCommMaskedFeatures (LidarPoses) returns (CommMaskedFeatures);
    rpc RequestMap2ProjectedCommMaskedFeature (RequestMap) returns (CommMaskedFeature);
    rpc Feature2ConfMap (Feature) returns (ConfMap);                    // 向其他进程提供“根据特征获取置信图”的服务
    rpc Feature2PredBox (Feature) returns (PredBox);                    // 向其他进程提供“根据特征获取检测框”的服务
}

service PresentationService {                                           // 信息呈现子系统

}

message Empty {}

message NDArray {
    bytes data = 1;                     // NDArray 的序列化数据
    string dtype = 2;                   // NDArray 的数据类型
    repeated int32 shape = 3;           // NDArray 的形状
}

message PCD {                           // 原始点云数据
    NDArray pcd = 1;                    // 原始点云数据
    int64 ts_pcd = 2;                   // 原始点云对应时间戳
}

message LidarPoseAndPCD {               // 雷达位姿和点云
    NDArray lidar_pose = 1;             // 雷达位姿
    int64 ts_lidar_pose = 2;            // 雷达位姿对应时间戳
    NDArray pcd = 3;                    // 原始点云数据
    int64 ts_pcd = 4;                   // 原始点云数据对应时间戳
}

message PVA {                           // 雷达位姿、速度、加速度信息
    NDArray lidar_pose = 1;             // 雷达位姿
    int64 ts_lidar_pose = 2;            // 雷达位姿对应时间戳
    NDArray velocity = 3;               // 速度
    int64 ts_v = 4;                     // 速度对应时间戳
    NDArray acceleration = 5;           // 加速度
    int64 ts_a = 6;                     // 加速度对应时间戳
}

message ExtrinsicMatrix {               // 外参矩阵
    NDArray extrinsic_matrix = 1;       // 外参矩阵
    int64 ts_extrinsic_matrix = 2;      // 外参矩阵对应时间戳
}

message OthersInfos {                       // 所有他车信息
    map<string, CAVInfo> others_infos = 1;  // 所有他车信息

    message CAVInfo {                       // 单个他车信息
        NDArray lidar_pose = 1;             // 雷达位姿
        int64 ts_lidar_pose = 2;            // 雷达位姿对应时间戳
        NDArray velocity = 3;               // 速度
        int64 ts_v = 4;                     // 速度对应时间戳
        NDArray acceleration = 5;           // 加速度
        int64 ts_a = 6;                     // 加速度对应时间戳
        NDArray feature = 7;                // 特征
        int64 ts_feature = 8;               // 特征对应时间戳
        optional NDArray comm_mask = 9;
    }
}

message OthersCommMasks {                           // 所有他车协作图
    map<string, CommMask> others_comm_masks = 1;    // 所有他车协作图
}

message CommMaskAndLidarPose {
    NDArray comm_mask = 1;
    int64 ts_comm_mask = 2;
    NDArray lidar_pose = 3;
    int64 ts_lidar_pose = 4;
}

message Feature {                       // 特征
    NDArray feature = 1;                // 特征
    int64 ts_feature = 2;               // 特征对应时间戳
}

message CommMask {                      // 协作图
    NDArray comm_mask = 1;              // 协作图
    int64 ts_comm_mask = 2;             // 协作图对应时间戳
}

message PredBox {                       // 检测框
    NDArray pred_box = 1;               // 检测框
    int64 ts_pred_box = 2;                // 检测框对应时间戳
}

message FeatureAndConfMap {             // 特征和置信图
    NDArray feature = 1;                // 特征
    int64 ts_feature = 2;               // 特征对应时间戳
    NDArray conf_map = 3;               // 置信图
    int64 ts_conf_map = 4;              // 置信图对应时间戳
}

message LidarPoses {                            // 多个雷达位姿
    map<string, LidarPose> lidar_poses = 1;     // 多个雷达位姿

    message LidarPose {                         // 雷达位姿
        NDArray lidar_pose = 1;                 // 雷达位姿
        int64 ts_lidar_pose = 2;                // 雷达位姿对应时间戳
    }
}

message Features {                              // 多个特征
    map<string, Feature> features = 1;          // 多个特征
}

message CommMaskedFeature {
        NDArray comm_masked_feature = 1;
        NDArray comm_mask = 2;
        int64 ts_feature = 3;
    }

message CommMaskedFeatures {
    map<string, CommMaskedFeature> comm_masked_features = 1;
}

message RequestMap {
    NDArray lidar_pose = 1;
    NDArray request_map = 2;
    int64 ts_request_map = 3;
}

message ConfMap {                       // 置信图
    NDArray conf_map = 1;               // 置信图
    int64 ts_conf_map = 2;                // 置信图对应时间戳
}
